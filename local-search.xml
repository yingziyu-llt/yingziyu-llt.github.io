<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>20岁快乐</title>
    <link href="/2024/08/23/20%E5%B2%81/"/>
    <url>/2024/08/23/20%E5%B2%81/</url>
    
    <content type="html"><![CDATA[<p>祝我生日快乐！</p><p>还记得去年的今天，刚刚进入燕园，应该是第一天军训，特别激动，特别兴奋，强烈的期望着能在学校闯出一片天地。一年过去了，也算是有了点收获吧。虽然貌似并没有什么特别优秀的成绩，也没有很高的绩点，竞赛获奖也没有啥很值得提及的，但我一年学了很多课程，见识了生物、生物信息、计算机、人工智能这么几个方向。虽然也就只是看了看，也没啥很突出的成绩，但我确实感觉我比刚刚进学校的时候知道了一点新的东西，学到了一些可能有用可能没用的知识，参加了一堆有趣的比赛和活动，即使也没拿上什么奖项，但我确实很满足。</p><p>又过了一年了，顺利进入了20岁。20岁的我，希望能有很多很多的事情要做。不必有意义，只要它有趣，能有些许收获，就好了。</p><p>再引用一下去年的歌词吧，”问少年心事，眼底未名水，胸中黄河月”，愿我的二十岁，充实，热烈，能创造出一些哪怕是微不足道的价值，给身边的人带来一点点热。</p><p>“我们明天巨木成林，让中华震惊世界！”</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西瓜书</title>
    <link href="/2024/08/08/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    <url>/2024/08/08/%E8%A5%BF%E7%93%9C%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/documents/machineLearing.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Foundations of Biochemistry</title>
    <link href="/2024/07/08/%E7%94%9F%E7%89%A9%E5%8C%96%E5%AD%A6-foundations/"/>
    <url>/2024/07/08/%E7%94%9F%E7%89%A9%E5%8C%96%E5%AD%A6-foundations/</url>
    
    <content type="html"><![CDATA[<h2 id="Cellular-Foundation"><a href="#Cellular-Foundation" class="headerlink" title="Cellular Foundation"></a>Cellular Foundation</h2><h3 id="Cells-as-Structural-and-Functional-Units"><a href="#Cells-as-Structural-and-Functional-Units" class="headerlink" title="Cells as Structural and Functional Units"></a>Cells as Structural and Functional Units</h3><ul><li><p><strong>细胞的基本结构</strong>:</p><ul><li><strong>Plasma membrane (细胞质膜)</strong>: 包围细胞的周边，由脂质和蛋白质构成。薄而坚韧，柔韧且疏水，排斥极性分子。</li><li><strong>功能</strong>:<ul><li><strong>Transport proteins</strong>: 允许离子穿过膜。</li><li><strong>Receptor proteins</strong>: 传递信号穿过膜。</li><li><strong>Enzymes</strong>: 参与化学反应。</li></ul></li></ul></li><li><p><strong>常见术语</strong>:</p><ul><li><strong>Cytoplasm (细胞质)</strong></li><li><strong>Ribosome (核糖体)</strong></li><li><strong>Proteasome (蛋白酶体)</strong></li><li><strong>Cytosol (细胞质基质)</strong></li><li><strong>Metabolites (代谢产物)</strong></li><li><strong>Coenzymes (辅酶)</strong></li><li><strong>Nucleoid (拟核)</strong></li><li><strong>Nucleus (细胞核)</strong></li><li><strong>Eukaryotes (真核生物)</strong></li></ul></li></ul><h3 id="Cell-Size-and-Diffusion"><a href="#Cell-Size-and-Diffusion" class="headerlink" title="Cell Size and Diffusion"></a>Cell Size and Diffusion</h3><ul><li><p><strong>扩散与细胞大小的关系</strong>:</p><ul><li>表面积是 $r^2$ 的函数，体积是 $r^3$ 的函数。</li><li>随着细胞大小增加，扩散速率下降，直到代谢消耗的营养物超过跨膜载体的供给能力。</li><li>如果体积太小，反应空间不足，因此细胞大小受限。</li></ul></li><li><p><strong>动物和植物细胞</strong>:</p><ul><li>一般为 5 到 100 $\mu m$。</li><li>许多动物细胞表面高度折叠或复杂化，以增加表面积。</li></ul></li></ul><h3 id="Sources-of-Energy-and-Biosynthetic-Precursors"><a href="#Sources-of-Energy-and-Biosynthetic-Precursors" class="headerlink" title="Sources of Energy and Biosynthetic Precursors"></a>Sources of Energy and Biosynthetic Precursors</h3><ul><li><p>用细胞供能方式来划分</p><ul><li><p>光化学供能(phototrophs)</p></li><li><p>化学供能(chemotrophs)</p><ul><li>由氧化化学物质: $HS^- -&gt; S^0$,$S^0 -&gt; SO_4^{2-}$ 等供能</li></ul></li></ul></li><li><p>用能量来源来划分</p><ul><li>将二氧化碳直接合成为生物分子(biomolecular)的自养者(autotrophs)</li><li>需要已经处理了的养分的异养者(heterotrophs)</li></ul></li></ul><p>需要注意，存在光能异养生物，如绿色无硫细菌(green nonsulfur bacteria)，代表种：<em>Chloroflexus auranticus</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>生物 笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数</title>
    <link href="/2024/07/02/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <url>/2024/07/02/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/documents/linearAlgebra.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
    <tags>
      
      <tag>数学笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World Again!</title>
    <link href="/2024/07/01/hello-world/"/>
    <url>/2024/07/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>还记得高中时曾经搭建了一个 hexo 的博客，写了一些乱七八糟的东西。<br>有计算机的内容，有游记，也有数学。东西很杂乱，质量也不怎么高。<br>原本想着高考完重新捡起来，结果高考完羟基、报考的事情又多又混乱，最后不了了之了。<br>突然想起来的由头是前几天在树洞上看了一个关于数学教学与给分的帖子，又想到这两个学期我用了不少他人的资料。比如 xyt 学长的讲义，Arthals的笔记和心得。<br>我也从刚刚入学的大一小东西变成了大二的中登，是时候该总结一些笔记供后人参考了。<br>可以预料到我的博客质量应该不会比得上 Arthals 的笔记。但万一可以让某些同学看了有一点点收获，那我这个博客就没有白建。</p><p>希望一年后的今天，我可以骄傲的说出，我的博客没有白建！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>导数解题技巧</title>
    <link href="/2022/03/13/%E5%AF%BC%E6%95%B0%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/03/13/%E5%AF%BC%E6%95%B0%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="考点1-单调区间问题"><a href="#考点1-单调区间问题" class="headerlink" title="考点1. 单调区间问题"></a>考点1. 单调区间问题</h2><span id="more"></span><p>单调区间一般是导数大题中较为简单的一问，目的在于给第二问提供一些条件。一般为4分。该问的核心是正确求导，在正确求导的基础上解决不等式问题。</p><blockquote><p>例题1.已知函数$f(x)&#x3D;-a\ln x+(a+1)x-\frac{1}{2}x^2$ ，讨论函数的单调性。</p></blockquote><p>解：定义域：$x \in (0,+\infty)$</p><p>​       $f’(x)&#x3D;\frac{a}{x}+a+1-x$</p><p>令其大于0.</p><p> $-x^2+(a+1)x+a&gt;0\ \ \ &#x3D;&gt; (x-1)(x-a)&lt;0$</p><p>若$a&gt;1$ 则$f(x)$在$x\in (1,a)$上单调递增，在….(略)</p><p>这类问题比较简单，需要细心完成。</p><h2 id="考点2-不等式恒成立问题"><a href="#考点2-不等式恒成立问题" class="headerlink" title="考点2.不等式恒成立问题"></a>考点2.不等式恒成立问题</h2><p>这类问题有的简单，有的较难。这类问题核心是求出某个参数的取值范围，使得某一不等式恒成立或者证明某一不等式恒成立。</p><p>这类问题如果出现在第二问，注意使用第一问的结论，很大概率上可以作为放缩的依据。</p><p>对于这类问题，常用的方法有以下几种：</p><h3 id="最值法"><a href="#最值法" class="headerlink" title="最值法"></a>最值法</h3><p>先求导。令导数等于零。简单问题在这里已经可以求出根了。求出根后带回原函数，求出最值，证明不等式&#x2F;求解与参数相关的不等式。</p><p>思维难度：1</p><p>计算难度：5</p><p>困难问题会发现无法直接求出根，这时要用隐零点问题的求解方法求出隐零点再回带。<del>（虽然大概率求出隐零点后还是带不进去）</del></p><p>处理较难问题时容易出现最值极其复杂而难以求解的情况，使用放缩法。<del>（放缩完还是不会做）</del></p><h3 id="参变分离法"><a href="#参变分离法" class="headerlink" title="参变分离法"></a>参变分离法</h3><p>将含参数的所有项移到一边。參变分离。将另一边不含参数的式子变形后设为函数$g(x)$，利用函数的最大值最小值求解不等式</p><p>思维难度：2</p><p>计算难度：3～5</p><p>较难问题需要将$g(x)$大力变形后解决。困难问题<del>可能直接</del>无法使用本方法解决。</p><h3 id="极值点偏移"><a href="#极值点偏移" class="headerlink" title="极值点偏移"></a>极值点偏移</h3><p>本方法专门对证明两个根之间的不等关系。</p><p>首先求导，求出极值点。求出极值点后，将一个根$x_2$根据极值点对称，确定单调区间。 之后比较$f(x_2),f(n-x_2)$，将$x_2$代换为$x_1$，根据已有的不等关系，证明题设不等式。</p><p>例题：2016年全国I 理科数学 21</p><p>思维难度：4</p><p>计算难度：2</p><p><del>适用范围较小。</del>挺常用的。</p><h3 id="换元法"><a href="#换元法" class="headerlink" title="换元法"></a>换元法</h3><p>对于极值点偏移问题，还可以使用换元法。</p><p>首先将两根带入，求得两个方程。</p><p>将两个方程相减后，可以得到一个关于参数的式子，再次带入两个方程相加的式子。</p><p>这时候你会发现你得到了一个大式子<del>（一大坨屎）</del></p><p>我们尝试化简。</p><p>找到式子中存在的可以用两根进行某种运算表示的小式子，换元。</p><p>这时出现了一个函数。</p><p>尝试求导、求极值。。。</p><p>然后就完了</p><p>思维难度：5</p><p>计算难度：3</p><p><del>适合在忘了极值点偏移的时候用</del></p><h2 id="考点3-根数量讨论"><a href="#考点3-根数量讨论" class="headerlink" title="考点3.根数量讨论"></a>考点3.根数量讨论</h2><p>这类问题相对套路化。一般就是第二问问某个方程有几个根，求某个参数的取值范围。</p><p>方法也比较简单。首先求导。找到两个极值点。</p><p>然后找左右极限，当然不能露出是极限。通过其他方式巧妙求出边界范围。</p><p>最后根据题目要求，找到<strong>正负交替</strong>，然后求解。</p><p>这里的难点是找正负交替。</p><p>常见的方法有两种。</p><p>第一种：求出参数范围。在参数范围外选择某个具体的数，让这个数所对应的函数值具有某种性质，从而确定正负交替。</p><p>第二种：有时候会发现，第一种用不了。我们没法找到某个具体的值，让我们想要的条件成立。这时，我们只需要求出一个最大的x，满足某种不等关系。这种不等关系下，可以找到正负交替就可以了。</p><p><del>当然，如果还是搞不出来，那就求极限吧，2分</del></p><h2 id="考点4-放缩法"><a href="#考点4-放缩法" class="headerlink" title="考点4.放缩法"></a>考点4.放缩法</h2><p>这是一门玄学。</p><p>一般来说，放缩的条件是题目的第一问给过的，只需要好好利用第一问就可以得到所需要的不等式。</p><p>对于没有给的题目，一般需要记住一下几个不等式（需要证明）</p><p>$e^x\geq x+1$</p><p>$e^x\geq ex$</p><p>$\ln x \leq x - 1$</p><p>$\ln x \leq \frac{x}{e}$</p><h2 id="考点5-隐零点问题"><a href="#考点5-隐零点问题" class="headerlink" title="考点5.隐零点问题"></a>考点5.隐零点问题</h2><p>自己找正负交替去</p><h2 id="考点6-其他常用技巧"><a href="#考点6-其他常用技巧" class="headerlink" title="考点6.其他常用技巧"></a>考点6.其他常用技巧</h2>]]></content>
    
    
    
    <tags>
      
      <tag>文化课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析几何学习笔记</title>
    <link href="/2021/11/21/%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/21/%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="考点1-直线"><a href="#考点1-直线" class="headerlink" title="考点1.直线"></a>考点1.直线</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ol><li><p>一般式：$Ax+By+C&#x3D;0$ (A,B,C为常数，AB不同时为0)</p></li><li><p>点斜式：过 $(x_0,y_0)$ ，斜率为 $k$ : $y-y_0&#x3D;k(x - x_0)$</p></li><li><p>斜截式：过 $(0,b)$ ，斜率为$k$ : $y &#x3D; kx+b$</p></li><li><p>两点式：过 $(x_1,y_1)$ , $(x_2,y_2)$  : $\frac{y-y_1}{y_2 - y_1}&#x3D;\frac{x-x_1}{x_2 - x_1}$</p></li><li><p>截距式：过 $(a,0)$ , $(0,b)$:$\frac{x}{a} + \frac{y}{b} &#x3D; 1$</p></li></ol><p>注意点：使用截距条件时要注意过原点的直线。</p><p>斜率 $k$ : $k&#x3D;\tan \theta$</p><span id="more"></span><h3 id="直线的相关关系："><a href="#直线的相关关系：" class="headerlink" title="直线的相关关系："></a>直线的相关关系：</h3><p>设两直线为：$A_1x+B_1y+C_1&#x3D;0$,$A_2x+B_2y+C_2&#x3D;0$</p><ul><li><p>垂直：$A_1* A_2+B_1*B_2&#x3D;0$</p></li><li><p>平行：$ A_1<em>B_2-A_2</em>B_1&#x3D;0 $</p></li></ul><h3 id="距离问题"><a href="#距离问题" class="headerlink" title="距离问题"></a>距离问题</h3><ul><li><p>两点距离：$d&#x3D;\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$</p></li><li><p>点到直线距离：$d&#x3D;\frac{|Ax_0+By_0+C|}{\sqrt{A^2+B^2}}$</p></li><li><p>两条直线之间的距离：$d&#x3D;\frac{|C_1-C_2|}{\sqrt{A^2+B^2}}$</p></li></ul><p>爆算吧</p><h3 id="对称问题"><a href="#对称问题" class="headerlink" title="对称问题"></a>对称问题</h3><ul><li><p>点关于某点对称：利用中点坐标公式解方程</p></li><li><p>点关于某条直线对称：</p><p>1.设其对称点坐标</p><p>2.对称点和已有点中点在直线上，两点连线与直线垂直</p><p>3.解方程</p></li><li><p>线关于点对称：斜率不变，对称一点代入</p></li><li><p>线关于线对称：求出两线交点，选择一点对称，两点解出直线。</p></li></ul><p>主要内容：爆算</p><h2 id="考点2-椭圆"><a href="#考点2-椭圆" class="headerlink" title="考点2 椭圆"></a>考点2 椭圆</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><h4 id="第一定义"><a href="#第一定义" class="headerlink" title="第一定义"></a>第一定义</h4><p>平面上两不同点的距离和为定值的点的集合。</p><p>定点：焦点</p><p>两焦点之间的距离：焦距（$2c$）</p><p>距离和：$2a$</p><h4 id="第二定义"><a href="#第二定义" class="headerlink" title="第二定义"></a>第二定义</h4><p>定点和准线距离之比为离心率$e&#x3D;\frac{c}{a}\  (0&lt;e&lt;1) $ 的点的集合</p><p>准线方程：$x&#x3D;\frac{a^2}{c}$</p><h4 id="第三定义"><a href="#第三定义" class="headerlink" title="第三定义"></a>第三定义</h4><p>与平面两点连线斜率乘积满足$k_{PA}*k_{PB}&#x3D;-\frac{a^2}{b^2}$的点的集合。（A、B为椭圆和x轴交点）</p><h3 id="方程"><a href="#方程" class="headerlink" title="方程"></a>方程</h3><h4 id="标准式"><a href="#标准式" class="headerlink" title="标准式"></a>标准式</h4><p> $\frac{x^2}{a^2}+\frac{y^2}{b^2}&#x3D;1(a &gt; b&gt;0)$（焦点在x轴上）</p><p>$\frac{x^2}{b^2}+\frac{y^2}{a^2}&#x3D;1(a &gt; b&gt;0)$（焦点在y轴上）</p><h4 id="一般式"><a href="#一般式" class="headerlink" title="一般式"></a>一般式</h4><p>$mx^2+ny^2&#x3D;1 (m &gt; 0,n &gt; 0,m \neq n)$</p><p>这里如果不加限制的话，此方程可以表示圆、椭圆、直线、双曲线。</p><h4 id="参数式"><a href="#参数式" class="headerlink" title="参数式"></a>参数式</h4><p>$$</p><p>$$</p><p>$$<br>\begin{matrix}<br>x&#x3D;acos\theta \<br>y&#x3D;bsin\theta<br>\end{matrix}<br>$$</p><p>对于各种求方程的题目，均可以利用以上几个方法建立方程。</p><p>对于给出两焦点和一个椭圆上的点的问题，可以求出c&#x3D;&gt;把$b^2$用$a^2-c^2$表示&#x3D;&gt;代入点求出方程</p><p>对于给两点的问题，建议使用一般式</p><p>对于给出一个方程，说另一个方程公用焦点的问题，建议求出焦点后按照第一类方法完成。</p><p>对于最值问题，可以尝试参数方程。</p><h3 id="几何性质和几何量"><a href="#几何性质和几何量" class="headerlink" title="几何性质和几何量"></a>几何性质和几何量</h3><ol><li><p>对称性：关于x、y轴和原点对称</p></li><li><p>范围：$-a &lt; x &lt; a $，$ -b &lt; y &lt; b $</p></li><li><p>顶点 $A_1(-a,0),A_2(a,0),B_1(0,-b),B_2(0,b)$</p></li><li><p>轴长：长轴 $&#x3D;2a$，短轴 $&#x3D;2b$</p></li><li><p>焦距 $&#x3D;2c$</p></li><li><p>准线：$x&#x3D;\pm\frac{a^2}{c}$</p></li><li><p>通径：过焦点的垂线与椭圆两个交点连线长度 $\frac{2b^2}{a}$</p></li><li><p>焦准距：焦点到准线的距离$\frac{b^2}{c}$</p></li><li><p>焦半径：焦点到椭圆上某点连线长度。变量。$|PF_1|&#x3D;a-ex,|PF_2|&#x3D;a+ex$</p></li><li><p>离心率：$e&#x3D;\frac{c}{a}$</p></li><li><p>特征三角形</p></li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>数形结合</li><li>待定系数法</li><li>分类讨论（讨论焦点位置）</li><li>计算基本功</li><li>设而不求</li><li>利用不等式求最值</li><li>几何关系推导</li><li>直线与椭圆的位置关系：联立，算$\Delta$，若$\Delta &gt; 0$，相交，若$\Delta &#x3D; 0$，相切，若$\Delta &lt; 0$，相离。还可以计算定点位置，如果在椭圆内部，则相交。否则分类讨论。</li><li>焦点三角形问题：<br>$$<br>令m&#x3D;|PF_1|,n&#x3D;|PF_2| \<br>$$<br>$$<br>S&#x3D;\frac{1}{2}mn\sin\ \theta \<br>$$<br>$$<br>m+n&#x3D;2a \<br>$$<br>$$<br>4c^2&#x3D;m^2+n^2-2mn\cos\ \theta<br>$$</li><li>焦点三角形面积：$S&#x3D;\frac{\sin \theta}{1-\cos \theta}b^2&#x3D;\tan \frac{\theta}{2}\ b^2$</li><li>点差法：解决中点相关问题</li></ol><p>例题：椭圆$x^2&#x2F;16+y^2&#x2F;4&#x3D;1$弦AB中点M坐标为$(2,1)$，求AB方程</p><p>设$A(x_1,y_1)$,$B(x_2,y_2)$。</p><p>代入椭圆方程。</p><p>$\frac{(x_1+x_2)(x_1-x_2)}{16}+\frac{(y_1+y_2)(y_1-y_2)}{4}&#x3D;0$</p><p>又$x_1+x_2&#x3D;4,y_1+y_2&#x3D;2$</p><p>$0.25+0.5k&#x3D;0$ </p><ol start="12"><li><p>切线、切点弦问题<br>$$<br>Axx_0+Byy_0+D\frac{x+x_0}{2}+E\frac{y+y_0}{2}+F&#x3D;0<br>$$</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/403852004">更多技巧</a></p></li></ol><h2 id="考点3-双曲线"><a href="#考点3-双曲线" class="headerlink" title="考点3 双曲线"></a>考点3 双曲线</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="第一定义-1"><a href="#第一定义-1" class="headerlink" title="第一定义"></a>第一定义</h4><p>在平面内到平面上两点距离差为定值（小于两点间距离）的点的集合。</p><h4 id="第二定义-1"><a href="#第二定义-1" class="headerlink" title="第二定义"></a>第二定义</h4><p>到平面上定点和定直线距离比例为定值$e&#x3D;\frac{c}{a}(e&gt;1)$的点的集合。</p><h4 id="第三定义-1"><a href="#第三定义-1" class="headerlink" title="第三定义"></a>第三定义</h4><p>和两定点连线斜率为定值$\frac{a^2}{b^2}$的点的集合</p><h3 id="方程-1"><a href="#方程-1" class="headerlink" title="方程"></a>方程</h3><h4 id="标准方程"><a href="#标准方程" class="headerlink" title="标准方程"></a>标准方程</h4><p>焦点在x上：$\frac{x^2}{a^2} - \frac{y^2}{b^2} &#x3D; 1$</p><p>焦点在y上：$\frac{y^2}{a^2} - \frac{x^2}{b^2} &#x3D; 1$</p><p>其中 $a&gt;0,b&gt;0$</p><h4 id="一般方程"><a href="#一般方程" class="headerlink" title="一般方程"></a>一般方程</h4><p>$mx^2+ny^2&#x3D;1$，其中$ mn&lt;0 $</p><h3 id="几何性质和几何量-1"><a href="#几何性质和几何量-1" class="headerlink" title="几何性质和几何量"></a>几何性质和几何量</h3><ol><li>对称性 关于x、y轴和原点对称</li><li>范围 $x\in (-\infty ,-a) \cup (a,+\infty) $，$ y \in \mathbb R $</li><li>顶点 $A_1(-a,0),A_2(a,0),B_1(0,-b),B_2(0,b)$</li><li>渐近线 $\frac{x}{a} \pm \frac{y}{b}&#x3D;0$</li><li>轴长 实轴 :$2a$，虚轴 $&#x3D;2b$</li><li>焦距 $2c$</li><li>准线 $x&#x3D;\pm\frac{a^2}{c}$</li><li>焦准距 焦点到准线的距离$\frac{b^2}{c}$</li><li>焦半径 焦点到双曲线上某点连线长度。变量。$|PF_1|&#x3D;ex-a,|PF_2|&#x3D;a+ex$</li><li>离心率 $e&#x3D;\frac{c}{a}$</li><li>特征三角形</li></ol><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>同椭圆</p><h2 id="考点4-抛物线"><a href="#考点4-抛物线" class="headerlink" title="考点4 抛物线"></a>考点4 抛物线</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>到定点和定直线距离相等的点的集合。</p><h3 id="方程-2"><a href="#方程-2" class="headerlink" title="方程"></a>方程</h3><p>$$<br>y^2&#x3D;2px<br>$$</p><p>$$<br>x^2&#x3D;2py<br>$$</p><h3 id="几何性质和几何量-2"><a href="#几何性质和几何量-2" class="headerlink" title="几何性质和几何量"></a>几何性质和几何量</h3><ol><li><p>对称性：关于x轴对称</p></li><li><p>范围：$x&gt;0 $</p></li><li><p>顶点 $O(0,0)$</p></li><li><p>准线：$x&#x3D;-\frac p2$</p></li><li><p>焦准距：焦点到准线的距离$p$</p></li><li><p>焦半径：焦点到椭圆上某点连线长度。变量。$|PF|&#x3D;x+\frac p2$</p></li><li><p>离心率：$e&#x3D;1$</p></li><li><p>过焦点直线和抛物线产生两个交点，两交点间长度$x_1+x_2+p$</p></li><li><p>$|AF|&#x3D;\frac{p}{1-cos\ \theta}$ $|BF|&#x3D;\frac{p}{1+cos\ \theta}$ $|AB|&#x3D;\frac{2p}{sin^2\ \theta}$</p></li><li><p>过焦点直线和抛物线产生两个交点，以这两个点为直径的圆和准线相切</p></li></ol><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><ol><li>有直线和抛物线时，设抛物线上的点坐标。设次数高的，把另一个表示出来，可以大大减少计算量</li><li>处理最值问题时，尝试将焦半径和到准线距离相互转化</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>文化课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NOIP2021游记</title>
    <link href="/2021/11/21/NOIP2021%E6%B8%B8%E8%AE%B0/"/>
    <url>/2021/11/21/NOIP2021%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>本来不是很想写了，但仔细想想，还是写了，纪念我这五年的OI生活。</p><span id="more"></span><h3 id="Day-1-11-18-周四"><a href="#Day-1-11-18-周四" class="headerlink" title="Day -1 11.18 周四"></a>Day -1 11.18 周四</h3><p>距离比赛还有2天，下午翘了化学考试和体育课，在机房看tarjan,看了一阵开始Among US。6：20聚餐，想到这是最后一次聚餐了，心里还是有一点点伤感。</p><p>聚餐很开心。回机房信心赛。这次信心赛我没有AK，有道简单的贪心没有想出来。300pts。</p><p>晚上没有写作业，写了会题，玩了会minecraft。</p><h3 id="Day-0-11-19-周五"><a href="#Day-0-11-19-周五" class="headerlink" title="Day 0 11.19 周五"></a>Day 0 11.19 周五</h3><p>明天考试。早上逃了个早读。本身就想旷个早读，没想到老师直接请了一天的假。</p><p>看tarjan、最大流、费用流、STL</p><p>minecraft+AmongUs.</p><p>经典押题环节，我押了线段树和区间DP</p><p>今天雪好大啊，瑞雪兆丰年,是吗？</p><p>下楼的时候，看见原先有一堆书，被搬走了，突然回忆起了去年集训的很多事。心里酸酸的。希望今年还能去集训吧。</p><p>回了新市区。路上看了STL+组合数学。</p><h3 id="Day-1-11-20-周六"><a href="#Day-1-11-20-周六" class="headerlink" title="Day 1 11.20 周六"></a>Day 1 11.20 周六</h3><p>考试日</p><p>早上6：20起床</p><p>昨天晚上很晚才睡着。不过早上起来并不困。</p><p>luogu大凶，害怕。</p><p>坐车去考场。路上听了会歌。<a href="https://www.bilibili.com/video/BV1X34y1m7V2">源地址</a></p><p>到考场，杨老师已经来了。拿了巧克力，就进考场了。</p><p>见到了雪峰、dyf、cyd各位聚聚。没见到Woshiluo.</p><p>记忆了一下各种编译选项，手机关机，开始准备考试。</p><p>考试的时候才知道原来win下是不能使用-fsanitize的。</p><h4 id="T1-报数"><a href="#T1-报数" class="headerlink" title="T1 报数"></a>T1 报数</h4><p>拿到题，直接以为是个大模拟。先没做。看了一下后面的题，发现这个题还挺简单。</p><p>直接依题意模拟。题意读错了一次，后面很快就改过来了。</p><p>50–70pts -0.5h</p><p>大样例严重超时，但答案是对的。不管了。</p><h4 id="T2-数列"><a href="#T2-数列" class="headerlink" title="T2 数列"></a>T2 数列</h4><p>最开始打算依题意模拟。上了个厕所，忽然想到可以状压DP.题意读错*2,调了1h没调出来，先做后面的题。</p><h4 id="T3-方差"><a href="#T3-方差" class="headerlink" title="T3 方差"></a>T3 方差</h4><p>上来推式子，发现$ans&#x3D;n\Sigma x_i^2-(\Sigma x_i)^2$ </p><p>暴力搞。搜索，把搜出来的结果存到hash表里。样例1过了，样例2答案比std劣得多。</p><p>坏了。</p><p>后面发现是hash的时候没跑完。G</p><p>-1.5h 12pts</p><p>回过头调T2.发现出现巨大多问题。最后改完了，样例1、2都过了。</p><p>-1.5h 20pts</p><h4 id="T4-棋局"><a href="#T4-棋局" class="headerlink" title="T4 棋局"></a>T4 棋局</h4><p>考试还剩1h,本来想暴力莽一波T4,发现越写越ex,就不搞了，检查一下前面的。</p><p>预计：$[50,70]+12+20&#x3D;[82,102]$，感觉良好</p><p>考完试出来，发现人均120.突然发现自己进队没希望了，心态崩了。</p><p>大概率AFO</p><h3 id="11-28更新"><a href="#11-28更新" class="headerlink" title="11.28更新"></a>11.28更新</h3><p>退役，但没完全退役。</p><p>T1大家都挂分了，而且都挺惨。Luogu数据拿到了90分(50+20+20+0)，和预期差距不大。这次我校挺惨的，不办省选就没A队了。</p><p>传说要办省选。还不能完全放。</p>]]></content>
    
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP2021游记</title>
    <link href="/2021/10/23/CSP2021%E6%B8%B8%E8%AE%B0/"/>
    <url>/2021/10/23/CSP2021%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Day-1-2021-10-21-周四"><a href="#Day-1-2021-10-21-周四" class="headerlink" title="Day -1 2021.10.21 周四"></a>Day -1 2021.10.21 周四</h3><p>离考试还有2天，今天晚上是信心赛。</p><p>旷了一节生物课和数学考试，去打比赛。</p><p>题目很信心，AK了。</p><p>聚餐被取消了，哭哭。</p><p>晚自习写作业+写数学考试卷，好难，有点自闭。</p><span id="more"></span><h3 id="Day-0-2021-10-22-周五"><a href="#Day-0-2021-10-22-周五" class="headerlink" title="Day 0 2021.10.22 周五"></a>Day 0 2021.10.22 周五</h3><p>明天考试，晚上没有比赛。</p><p>上午回班，好像大家数学全考炸了，还好我没交。</p><p>下午第三节课去团建。玩的很开心。</p><p><del>《特色姿势》《首都绝对防御圈》《暴力碾标算》《盖总，你在干啥》</del></p><p>好像有化竞，请一次假吧。</p><p>晚上写作业。做了听力，居然还能听懂，很开心。</p><h3 id="Day-1-2021-10-23-周六"><a href="#Day-1-2021-10-23-周六" class="headerlink" title="Day 1 2021.10.23 周六"></a>Day 1 2021.10.23 周六</h3><p>考完了，自闭。</p><p>在本校考。看见了Woshiluo、XuFly、ZWY、袁、王梓沣。高兴。</p><p>拿上电脑，开虚拟机，配vimrc，挂了，快捷键不对劲，编译和运行顺序有问题。不管了。</p><p>T1廊桥。枚举给国内和国外的廊桥数量，计算有多少飞机能用廊桥。这里好像有个 $log\ n$ 做法，但我不会。难不成真是用树状数组维护最大值和区间和？写了个离散化+暴力。-40min。预计40pts</p><p>T2括号序列。考场上一眼看出来这是DP。推式子-15min。好像推出来了。写-30min。细节巨大多。样例二没过。调-30min，突然发现式子是错的。果断放弃。</p><p>T3回文写了个纯暴力。预计28pts。</p><p>还有大概1h,写T2暴力。写挂了。0pts.</p><p>T4完全没动。0pts.</p><p>估计：68pts</p><p>还是太菜了。</p><p>回家写作业。吐血了。我要累炸了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NOI2021 度假记</title>
    <link href="/2021/07/22/NOI2021-%E6%B8%B8%E8%AE%B0/"/>
    <url>/2021/07/22/NOI2021-%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day -3"></a>Day -3</h3><p>早上老师说建议机票改签，笑死，完全不管。机票都订了，改个鬼。</p><p>写题？笑死，摸。拜了拜我校著名雕塑，希望能有好运。</p><p>下午通知必须改签。。。“后果自负”，-1600¥</p><p>晚上回市区，老杨不去了，我裂开来，希望张老师能到吧。</p><span id="more"></span><h3 id="Day-2（报到日）"><a href="#Day-2（报到日）" class="headerlink" title="Day -2（报到日）"></a>Day -2（报到日）</h3><p>今天出发。早上7点起床，吃了早饭去机场。所有人都到了，很正常的进入候机状态（为什么现在安检不脱鞋了啊</p><p>候机室看小说（《临高启明》是真的好看，强推</p><p>然后晚点 1.5h ，飞机上继续临高启明</p><p>到了杭州，CCF走了。。。</p><p>打车去余姚梦麟中学，到学校七点多了，没饭了。还好有点剩饭（突然感觉好可怜</p><p>收拾宿舍，洗澡，和同学和我妈聊了会天，正常睡觉。</p><h3 id="Day-1（原先的报到日）"><a href="#Day-1（原先的报到日）" class="headerlink" title="Day -1（原先的报到日）"></a>Day -1（原先的报到日）</h3><p>明天台风登陆，宿舍颓废，估计明天笔试要取消吧。</p><p>中午12:30得到消息，下午3:30预热赛+笔试，赶紧回宿舍睡觉+看笔试题。</p><p>下午到了，结果说自由坐（这不直接抄死（大雾</p><p>试机题就是去年Day 1，没有提答和交互，我赌一波今年全是传统题</p><p>笔试挺顺利的，有个问密码条丢了扣几分的，蒙对了。。。</p><p>晚上回去做了道树剖，没调出来，应该不会考吧（Day 1 更新：考了，不会。。。做所有题一定要调完啊</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>台风登陆了，还好，没多大风，雨挺大</p><p>保守主义者的大失败（</p><p>回去，上午写题。打了几个模版（Dinic，exCRT）</p><p>下午颓废</p><p>Ayaya！<br><img src="https://www.myinstants.com/media/instants_images/ayaya.jpg"></p><p>晚上得知明天早上NOI Day1 。。。 早点睡觉吧（然而并睡不着（</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>悲惨的一天</p><p>真正的Day 1</p><p>比赛推后了1h</p><p>重点说一下比赛</p><p>开赛前看须知，一开赛先写 vimrc，发现不会。。。出了点问题。。。</p><p>看题。T1 显然树剖，突然后悔没调题。然后做 50pts 暴力。不知道为啥挂了。先调前 20pts ，出了一堆奇奇怪怪的 bug 。。。 -1h20min </p><p>前 20pts 过了，做后 30pts 。出事，时间过半了。。。</p><p>赶快开始看T2T3。</p><p>T2 题意理解能，退出了 dp 方程，但是不会求交点数，裂开来</p><p>T3 题意理解不能。是求可行解吗</p><p>T1 我的暴力是部分正确的–&gt;40pts</p><p>T2 不是dp。。。裂开来。据说是什么LGV引理板子。不会。。。</p><p>T3 题意理解错误。0pts。。。。</p><p>40+0+0。。。。绝对没Ag了</p><p>心态炸了。回宿舍颓废</p><p>Ayaya！第一季看完了。明天第二季</p><h3 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day 1.5"></a>Day 1.5</h3><p>颓颓颓</p><p>台风原因导致社会活动取消了。颓废*998244353</p><p>袁乃不愧是先知.jpeg，说海鲜来海鲜</p><p>下午接着颓。Ayaya！Ayaya！</p><p><img src="https://k33.kn3.net/taringa/1/4/8/5/4/1/67/higuchi/B18.jpg"></p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>心态极佳。反正最多Cu，已经低于预期了。随意考吧。</p><p>T1量子通信，开幕雷击。</p><p>感觉是字符串题。先 trie+A*。tire没调出来，果断暴力（后面发现好像是&#39;0&#39;和0的问题，不管了，自闭就完事了）</p><p>T2密码箱</p><p>想都不想，直接暴力。诶？这个取膜怎么办？推式子-30min</p><p>没推出来，直接除gcd吧。</p><p>T3机器人游戏</p><p>没时间了，直接模拟冲掉前4个点。</p><p>考试结束。突然有种如释重负的的感觉。外面的阳光好耀眼啊</p><p>吃饭。据他们说T2上下互质，直接膜就行了。T3前6个点可以直接输出 $ 3^n$。。。</p><p>不管了，吃饭，准备下午看成绩。</p><p>挂分了，挺惨的。</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>挺惨的。主要问题是菜。倒不是考试策略的问题。D1T1能调3h就证明了这一点，对各种数据结构和各类算法掌握及其不牢固。明年好好复习吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DP专题初探</title>
    <link href="/2021/07/03/DP/"/>
    <url>/2021/07/03/DP/</url>
    
    <content type="html"><![CDATA[<h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><span id="more"></span><h3 id="1-LIS问题"><a href="#1-LIS问题" class="headerlink" title="1.LIS问题"></a>1.LIS问题</h3><p>定义：求出最长上升子序列。即<br>$$<br>B\subseteq A,B[i]&lt;B[j]\ \ (i &lt; j)<br>$$<br>实现：</p><h4 id="1-O-n-2"><a href="#1-O-n-2" class="headerlink" title="1. $O(n^2)$"></a>1. $O(n^2)$</h4><p>思路：依题意模拟。<br>$$<br>F[i]&#x3D;max_{0\le j&lt;i,a[i]&lt;a[j]}{F[j]+1}<br>$$<br>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt; i;j++)<br>           <span class="hljs-keyword">if</span>(a[i] &gt; a[j])<br>               f[i] = <span class="hljs-built_in">max</span>(f[i],f[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-O-n-log-n"><a href="#2-O-n-log-n" class="headerlink" title="2.$O(n\log n)$"></a>2.$O(n\log n)$</h4><p>思考优化方法。设 <code>D[i]</code> 为以 <code>a[i]</code> 结尾的最长上升子序列长度， <code>g[j]</code> 为 <code>D[i] = j</code> 中最大的 <code>i</code> ，易知 <code>g[i]</code> 单增。</p><p>对于每个 <code>a[i]</code> 二分查找最小的k使得 <code>g[i]&gt;a[i]</code> ，则 <code>d[i]=k</code> ，更新 <code>g[i]</code></p><p>说人话：就是算出长度为 <code>l</code> 的前缀最后一位最小是几。如果这位能接上，就更新答案</p><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> val,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">cmp</span>(g[mid],val,k)) l = mid + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> r = mid;<br>&#125;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x7f</span>,<span class="hljs-built_in">sizeof</span>(g));<br>ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>&#123;<br>f[i] = <span class="hljs-built_in">search</span>(<span class="hljs-number">1</span>,i,a[i],<span class="hljs-number">2</span>);<br>g[f[i]] = <span class="hljs-built_in">min</span>(g[f[i]],a[i]);<br><span class="hljs-keyword">if</span>(f[i] &gt; ans) ans = f[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-LCS问题"><a href="#2-LCS问题" class="headerlink" title="2.LCS问题"></a>2.LCS问题</h3><p>定义：最长公共子序列。</p><h4 id="1-标准做法-O-n-2"><a href="#1-标准做法-O-n-2" class="headerlink" title="1.标准做法$O(n^2)$"></a>1.标准做法$O(n^2)$</h4><p>$$<br>F[i] &#x3D; max{F[j] + 1}(s_1[i] &#x3D;&#x3D; s_2[i] )<br>$$</p><p>$$<br>F[i]&#x3D;max{F[j]}(s_1[i]\ne s_2[i])<br>$$</p><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">char</span> s1[N],s2[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt; i;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s1[i] == s2[i])<br>                f[i] = <span class="hljs-built_in">max</span>(f[i],f[j] + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                f[i] = <span class="hljs-built_in">max</span>(f[i],f[j]);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-优化-O-n-log-n"><a href="#2-优化-O-n-log-n" class="headerlink" title="2.优化 $O(n\log n)$"></a>2.优化 $O(n\log n)$</h4><p>考虑转化。</p><p>将 <code>LCS</code> 转化为 <code>LIS</code> 。将 <code>A</code> 中元素编号为  <code>1~n+1</code>  ，在 <code>B</code> 中将 <code>A</code> 中出现的过的元素改为对应标号。没出现的编为 <code>0</code></p><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//UVA-10635</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3f3f3f3f</span><br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;M;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-type">int</span> n,m,p,q,i,k,j,t;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">66000</span>],b[<span class="hljs-number">66000</span>],g[<span class="hljs-number">66000</span>];<br>    <span class="hljs-comment">//freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> test=<span class="hljs-number">1</span>;test&lt;=t;++test)<br>    &#123;<br>        M.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;<br>        cin&gt;&gt;n&gt;&gt;p&gt;&gt;q;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=p<span class="hljs-number">+1</span>;++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a+i);<br>            <span class="hljs-keyword">if</span>(!M[a[i]]) M[a[i]]=x++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=q<span class="hljs-number">+1</span>;++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,b+i);<br>            b[i]=M[b[i]];<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(g,inf,<span class="hljs-built_in">sizeof</span>(g));<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=q<span class="hljs-number">+1</span>;++i)<br>        &#123;<br>            *<span class="hljs-built_in">lower_bound</span>(g,g<span class="hljs-number">+65000</span>,b[i])=b[i];<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d\n&quot;</span>,test,(<span class="hljs-type">int</span>)(<span class="hljs-built_in">lower_bound</span>(g,g<span class="hljs-number">+65000</span>,inf)-g));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//from https://www.cnblogs.com/zzqc/p/7326013.html</span><br></code></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><h3 id="定义：以区间长度为阶段，以左右端点划分状态。"><a href="#定义：以区间长度为阶段，以左右端点划分状态。" class="headerlink" title="定义：以区间长度为阶段，以左右端点划分状态。"></a>定义：以区间长度为阶段，以左右端点划分状态。</h3><h3 id="常用做法："><a href="#常用做法：" class="headerlink" title="常用做法："></a>常用做法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>;len &lt;= n;len++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i + len - <span class="hljs-number">1</span>&lt;= n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j = i + len - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = i;k &lt;= j;k++)<br>           <span class="hljs-comment">//do something</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="例题：NOI1995石子合并"><a href="#例题：NOI1995石子合并" class="headerlink" title="例题：NOI1995石子合并"></a>例题：<a href="https://www.luogu.com.cn/problem/P1880">NOI1995石子合并</a></h3><p>先推方程。设计 <code>F[i][j]</code> 表示将 <code>i</code> 到 <code>j</code> 堆石子合并所获得的最大权值, <code>sum[i]</code> 为前缀和。显然有：<br>$$<br>F[i][j]&#x3D;max{F[i][k] +F[k][j]+sum[j] - sum[i - 1]}(k \in [i,j])<br>$$<br>所以就可以写出下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;len &lt; n;len++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,j;i + len &lt;= n * <span class="hljs-number">2</span>;i++)<br>&#123;<br>j = i + len;<br>f[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = i;k &lt; j;k++)<br>f[i][j] = <span class="hljs-built_in">max</span>(f[i][j],f[i][k] + f[k + <span class="hljs-number">1</span>][j] + sum[j] - sum[i - <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最小值同理。</p><h3 id="这里有一个小技巧："><a href="#这里有一个小技巧：" class="headerlink" title="这里有一个小技巧："></a>这里有一个小技巧：</h3><p>原题是在环上处理的。很容易发现在环上处理是非常困难的，所以我们把环打开为链，并复制两遍，即可解决问题。即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>a[i + n] = a[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>;<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> sum[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>a[i + n] = a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n * <span class="hljs-number">2</span>;i++)<br>sum[i] = sum[i - <span class="hljs-number">1</span>] + a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;len &lt; n;len ++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> , j;i + len &lt;= n * <span class="hljs-number">2</span>;i++)<br>&#123;<br>j = i + len;<br>f[i][j] = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">28</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = i;k &lt; j;k++)<br>f[i][j] = <span class="hljs-built_in">min</span>(f[i][j] , f[i][k] + f[k + <span class="hljs-number">1</span>][j] +sum[j] - sum[i - <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">28</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n + <span class="hljs-number">1</span>;i++)<br>ans = <span class="hljs-built_in">min</span>(f[i][i + n - <span class="hljs-number">1</span>],ans);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(f));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;len &lt; n;len++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,j;i + len &lt;= n * <span class="hljs-number">2</span>;i++)<br>&#123;<br>j = i + len;<br>f[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = i;k &lt; j;k++)<br>f[i][j] = <span class="hljs-built_in">max</span>(f[i][j],f[i][k] + f[k + <span class="hljs-number">1</span>][j] + sum[j] - sum[i - <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br>ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n + <span class="hljs-number">1</span>;i++)<br>ans = <span class="hljs-built_in">max</span>(ans,f[i][i + n - <span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><h3 id="例题引入：-HNOI2008-玩具装箱"><a href="#例题引入：-HNOI2008-玩具装箱" class="headerlink" title="例题引入： HNOI2008 玩具装箱"></a>例题引入： <a href="https://loj.ac/p/10188">HNOI2008 玩具装箱</a></h3><p>先考虑暴力怎么做。设$s_i$为$c_i$的前缀和。容易知道：<br>$$<br>f[i] &#x3D; min{f[j] + （s[i] - s[j] + i - j - 1 - L）^2}<br>$$</p><p>复杂度：$O(n^2)$</p><p>考虑优化。</p><p>将柿子展开。令$b_i&#x3D;s_i + i$，$j$为最佳决策点。有：<br>$$<br>f[i]&#x3D;f[j]+(b_i-b_j-(L+1))^2<br>$$<br>展开，移项：<br>$$<br>f[j]+(b[j]+L+1)^2 &#x3D; 2b[j]b[i]+2Lb[i]-b[i]^2<br>$$<br>若设 $f[j]+(b[j]+L+1)^2$为纵坐标，$b[i]$为横坐标，原式变成了一条直线。<br>$$<br>l:y&#x3D;2b[j]x+2Lb[i]-b[i]^2<br>$$<br>斜率是$2b[j]$，截距为$2Lb[i]-b[i]^2$</p><p><img src="https://i.loli.net/2019/08/11/8U6VMXcTksSQK92.png"></p><p>(图源：<a href="https://www.cnblogs.com/15owzLy1-yiylcy/p/11336510.html">https://www.cnblogs.com/15owzLy1-yiylcy/p/11336510.html</a>)</p><p>利用线性规划思想。从下往上平移直线。第一个碰到的点则为最优的$j$。</p><p>维护一个凸壳。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">上图中，决策点的下凸壳为 (B,C,E)，但因为加入了点 <span class="hljs-selector-tag">G</span>，点 E 死了（大雾。<br>可以得到如下结论：<br><span class="hljs-number">1</span>、凸壳上边的斜率是从左到右单调递增的，否则会出现上图的情况。<br><span class="hljs-number">2</span>、设凸壳上的点从左至右依次记为 <span class="hljs-number">1</span>~k，显然有：在凸壳中加入一个横坐标大于当前所有点的点 t，若 <span class="hljs-built_in">slope</span>(k−<span class="hljs-number">1</span>,t)≤<span class="hljs-built_in">slope</span>(k−<span class="hljs-number">1</span>,k)，则 k 不在凸壳上。<br>依照上述做法可以用单调队列来维护凸壳。                         ---<span class="hljs-number">15</span>owzLy1<br></code></pre></td></tr></table></figure><p>（具体维护见代码）</p><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> queue[<span class="hljs-number">50010</span>],head = <span class="hljs-number">1</span>,tail = <span class="hljs-number">1</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n,l;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> c[<span class="hljs-number">50010</span>],s[<span class="hljs-number">50010</span>],f[<span class="hljs-number">50010</span>],b[<span class="hljs-number">50010</span>];<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calc_y</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> f[x] + (b[x] + l + <span class="hljs-number">1</span>) * (b[x] + l + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calc_k</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x,<span class="hljs-type">long</span> <span class="hljs-type">long</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">calc_y</span>(y) - <span class="hljs-built_in">calc_y</span>(x)) / (<span class="hljs-type">double</span>)(b[y] - b[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>,&amp;n,&amp;l);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;c[i]),s[i] = s[i - <span class="hljs-number">1</span>] + c[i],b[i] = s[i] + i;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>&#123;<br><span class="hljs-keyword">while</span>(tail != head &amp;&amp; <span class="hljs-built_in">calc_k</span>(queue[head],queue[head + <span class="hljs-number">1</span>]) &lt; <span class="hljs-number">2</span> * b[i]<br>head++;<span class="hljs-comment">//所有斜率&lt;2b[i]的一定不会是解，舍去</span><br><span class="hljs-type">int</span> j = queue[head];<br>f[i] = f[j] + (b[i] - b[j] - l - <span class="hljs-number">1</span>) * (b[i] - b[j] - l - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(tail != head &amp;&amp; <span class="hljs-built_in">calc_k</span>(i,queue[tail - <span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">calc_k</span>(queue[tail - <span class="hljs-number">1</span>],queue[tail]))<br>tail--;<span class="hljs-comment">//加点后维护凸壳</span><br>queue[++tail] = i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,f[n]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>习题：</p><p><a href="https://loj.ac/p/3156">[NOI2019] 回家路线</a></p><p>（明天写）</p>]]></content>
    
    
    
    <tags>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helloworld</title>
    <link href="/2021/06/30/helloworld/"/>
    <url>/2021/06/30/helloworld/</url>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
